Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        dp=[[0 for j in range(len(text2)+1)] for i in range(len(text1)+1)]  "we create a 0 by 0 matrix initially"
        
        for i in range(len(text1)-1,-1,-1):      "we go through every char in text1 and text2 and see if they match starting from end of these strings"
            for j in range(len(text2)-1,-1,-1):
                if text1[i]==text2[j]:           "if they do match it means that we can move 1 point in each direction of the grid and only compare the remaining of the two strings"
                    dp[i][j]=1+dp[i+1][j+1]
                else:                            "if they don't match it means that we can go either one char in text1 or 1 char in text2 and take max of these two which basically shows us which direction we go gives us tha max matching substrings"
                    dp[i][j]=max(dp[i+1][j],dp[i][j+1])
        return dp[0][0]
