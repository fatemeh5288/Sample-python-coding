You are given an array of integers stones where stones[i] is the weight of the ith stone.

We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is:

If x == y, both stones are destroyed, and
If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
At the end of the game, there is at most one stone left.

Return the weight of the last remaining stone. If there are no stones left, return 0.


class Solution:
    def lastStoneWeight(self, stones: List[int]) -> int:
        stones=[-x for x in stones]                                              "because we want to pop the largest two elements but in minheap they are at the left side of array, we convert them to negative to shift them right so we can pop and push elements"
        heapq.heapify(stones)                                                    "converts stones to heap data structure"
        while len(stones)>1 and stones[0]!=0:                                    "we continue the process until len of heap is greater than 1 and such that we are not left with 0"
            heapq.heappush(stones,heapq.heappop(stones)-heapq.heappop(stones))   "in each iteration we add y-x to the stones heap (we pop two times from the end of queue which are bascially the largest elements"
        return -stones[0]                                                        "since the stones contain negative value we put negative sign and index 0 will be the min element left in the heap"
