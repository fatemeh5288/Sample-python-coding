You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        dummy=ListNode()                      "we create a new list"
        cur=dummy                             "iterate through dummy"
        carry=0
        while l1 or l2 or carry:          "we add carry here since the nodes might be done but we still have some carry values that should be inserted next"
            val1=l1.val if l1 else 0
            val2=l2.val if l2 else 0
            sum_num=val1+val2+carry
            carry=sum_num//10                "this will be the carry over to the next sum"
            value_node=sum_num%10            "this is the final value that should be inserted in the list"
            cur.next=ListNode(value_node)
            l1=l1.next if l1 else None
            l2=l2.next if l2 else None
            cur=cur.next
        return dummy.next
