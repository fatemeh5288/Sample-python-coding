Given an m x n matrix, return all elements of the matrix in spiral order.

time complexity O(n*m) and space O(1) if we don't consider res array as extra space

class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        l,r=0,len(matrix[0])-1          "define 4 pointers l,r,t,b"
        t,b=0,len(matrix)-1
        res=[]
        while l<=r and t<=b:              "this will start from the outer loop and comes inside until the pointers meet"
            
            for i in range(l,r+1):         "we start from the left side and cover top row and then we can increment our top pointer"
                res.append(matrix[t][i])
            t+=1
            for i in range(t,b+1):        "right column"
                res.append(matrix[i][r])
            r-=1
            if not(l<=r and t<=b):         "this is if we have a row matrix or single column matrix"
                break
            
            for i in range(r,l-1,-1):     "bottom row"
                res.append(matrix[b][i])
            b-=1
            for i in range(b,t-1,-1):     "left column"
                res.append(matrix[i][l])
            l+=1
        return res
