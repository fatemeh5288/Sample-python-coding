Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

class Solution:
    def findMin(self, nums: List[int]) -> int:
        l,r=0,len(nums)-1
        res=nums[0]                     "we can initialize to any number in the array"
        
        while l<=r:
            mid=(l+r)//2
            if nums[l]<=nums[r]:           "if this happens it means the the array is already sorted and hence the min value will be the leftmost element"
                res=min(nums[l],res)        "we update the minimum value and break out of the loop"
                break
            else:                             "this part will run if there is a pivot"
                if nums[mid]>=nums[l]:        "this means that we are at the left part of sorted array so we want to shift to the right portion of array which is definitely smaller"
                    l=mid+1
                    res=min(res,nums[mid])
                else:                        "this shows that we are at the right part and hence we want to move left to find minimum"
                    r=mid-1
                    res=min(res,nums[mid])
        return res
        
