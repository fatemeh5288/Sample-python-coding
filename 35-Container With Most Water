You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.


class Solution:
    def maxArea(self, height: List[int]) -> int:
        l,r=0,len(height)-1                                         "start at the beginning of the container and set end at the end of array"
        max_area=0
        while l<r:                                                  "calculate the area for all lines and update max_area in each iteration until l and r pointers meet"
            
            max_area=max(max_area,(r-l)*min(height[l],height[r]))   "we select the min height between l and r pointer because water cannot go beyond the min height. multipliction by l-r gives the surface area"
            if height[l]>=height[r]:                                "we want to keep area and hence height maximum, so we shift the pointer that has lower height"
                r-=1
            elif height[l]<height[r]:
                l+=1
        return max_area
