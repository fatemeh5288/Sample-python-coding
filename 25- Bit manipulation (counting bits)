Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.

Time complexity O(n^2)
 class Solution:
    def countBits(self, n: int) -> List[int]:
        ans=[]
        for i in range(0,n+1):
            ans.append(self.countone(i))     "calling the function we created below to run through 0 to n and storing number of 1s in a list"
        return ans                           "returning the final result"
        
    def countone(self,n):     "creating a function that counts number of 1s in integer n"
        res=0
        while n:
            if n%2==1:
                res+=1
            n=n>>1
        return res
        
   
   
   solution 2 with linear time complexity O(n) using dynamic programming- The solution for each i is 1+dp[i-offset] offset being the last power of 2 number before i"
   
   
   class Solution:
    def countBits(self, n: int) -> List[int]:
        dp=[0]*(n+1)                "create an array of size n+1"
        offset=1                    "initialize offset to 1"
        for i in range(1,n+1):
            if offset*2==i:         "each time check if i is power of 2, update i if it is"
                offset=i
            dp[i]=1+dp[i-offset]  
        return dp
        
        
        
 
