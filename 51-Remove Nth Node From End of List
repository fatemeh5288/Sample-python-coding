Given the head of a linked list, remove the nth node from the end of the list and return its head.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        dummy=ListNode(0,head)    "we create a dummy node so we can start the left pointer from there instead of the head"
        left,right=dummy,head     "we set the right pointer to head"
        while n>0:                "we want the distance from left to right pointer to be n+1 and hence we keep shifting the right pointer"
            right=right.next
            n-=1
        while right:              "when the right is at null, the left pointer will be one node before the one we want to delete"
            left=left.next
            right=right.next
        left.next=left.next.next    "hence we remove that node by poinint it to next.next so two nodes after the left pointer"
        return dummy.next           "since dummy will include 0 as well, we return dummy.next"
