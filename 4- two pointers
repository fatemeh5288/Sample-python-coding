#A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all 
#non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.
#Given a string s, return true if it is a palindrome, or false otherwise.

(Solution1)

def ispalindrome(s):
    
    new_s=[]                                 "create empty list of string alphabetical chars"
    for char in s:
        if char.isalpha():                  "checkes if the char is alphabetical"
            new_s.append(char.upper())      "new_s list will contain all the characters of string s in uppercase"
    n=len(new_s)
    for i in range(0,n//2):                 "we only need to go to half of the list"
        if new_s[i]==new_s[n-i-1]:          "compare each element of the list with its palindrome"
            continue                        "we want the loop to continue for all charcaters up to the half length of the list"
        else:
            return False                    "if the above condition did not meet, it will return False"
    return True                             "if it goes through all steps above and it is not False, then it will return True"


(Second solution with same time complexity but memory of O(1) because we did not create any new string or list)

class solution:
    
    def ispalindrome(self,s):
        l,r=0,len(s)-1                                "two pointers one starting from left and the other from right"
        while l<r:
            while l<r and not self.alphanum(s[l]):    "while l<r and is alpha numerical char"
                l+=1
            while r>l and not self.alphanum(s[r]):
                r-=1
            if s[l].upper()!=s[r].upper():
                return Flase
            l,r=l+1,r-1                               "if char is not alpha numerical it goes to the next charcater"
        return True
    def alphanum(self,t):                          "if we aren't using isalphanum() built-in funtion we can create our own"
        for char in t:
            if not (ord('A')<ord(char)<ord('Z') or ord('a')<ord(char)<ord('z') or ord('0')<ord(char)<ord('9')):       "ord is a function to find ASCII values"
                return False
        return True  
