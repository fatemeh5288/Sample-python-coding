Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.


class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        dp=[1]*(len(nums)+1)               
        dp[0]=nums[0]
        max_product=float('-inf')                  "we set max to infinity"
        for i in range(1,len(nums)):
            dp[i]=dp[i-1]*nums[i]                  "each time we keep the products of previous dp and multiply it by nums[i] to get dp[i]"
            max_product=max(max_product,dp[i])     "next we update the maximum"
        return max_product                         "return the result"
