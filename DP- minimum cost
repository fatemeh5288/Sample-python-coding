You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.

You can either start from the step with index 0, or the step with index 1.

Return the minimum cost to reach the top of the floor.

class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        n=len(cost)
        dp=[None]*n          "create an empty list with size n that will later take on the minimum values that get updated each time"
        dp[0]=cost[0]        "we can either start from 0th or 1st index"
        dp[1]=cost[1]

        for i in range(2,n):                       "start a loop from second index onward"
            dp[i]=cost[i]+min(dp[i-1],dp[i-2])     "at index i we sum up the cost value at index i and minimum of the last two elements from dp list and update dp list"
        return min(dp[n-1],dp[n-2])                "this is the min of if we start from the 0 index or from index 1"
