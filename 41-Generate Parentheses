Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        res=[]
        stack=[]
        def backtrack(openN,closedN):
            if openN==closedN==n:             "we should have n open and n closing paranthesis in the end"
                res.append(''.join(stack))    "we add each valid stack to the final result"
                
                return
            if openN<n:                        "if this is true, it means that we can add open paranthesis to the stack"
                stack.append('(')
                backtrack(openN+1,closedN)     "we should increment open paranthesis that are used by 1"
                stack.pop()                    "not sure about this???"
            if closedN<openN:                  "we can only add closing paranthesis if their number is less than the open ones"
                stack.append(')')
                backtrack(openN,closedN+1)
                stack.pop()
        backtrack(0,0)                        "we call the backtrack function and initialize to 0 to represent empty stack"
        return res
        
