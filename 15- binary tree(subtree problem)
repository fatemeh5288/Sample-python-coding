#Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.

#A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        def check(root,subRoot):                       "create a function that checks if all the nodes are equal"
            if root.val==subRoot.val:                  "first start with the root node(each time the root node of the main tree will be updated to left or right if not equal"
                if self.isSubTree(root.left, SubRoot.left) and self.isSubTree(root.right,subRoot.right):          "if the left and right node of two trees are equal returns True"
                    return True
            else:
                return False
        if root.val!=subRoot.val:           "if the root nodes are not equal will update to left node"
            root=root.left
            if not check:                   "if check returns False, we will update the root node of main tree to right node and re-run check function"
                root=root.right
        return check                        "the final result will be reported as True/False"
