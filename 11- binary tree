#Given the root of a binary tree, return its maximum depth.

#A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
 
 (First solution- Recursively)
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        return 1 + max(self.maxDepth(root.left),self.maxDepth(root.right))
        
        
   (Second solution-BFS)
   
   # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        q=deque([root])                          "create a stack of the root node initially"
        level=0
        while q:                                 "continue this loop until there is no remaining node in the stack"
            
            for i in range(len(q)):             
                node=q.popleft()                 "pop the first element of stack and look at its left and right children"
                if node.left:              
                    q.append(node.left)          "append left and right children to the stack"
                if node.right:
                    q.append(node.right)
            level+=1                             "add 1 once adding children of each layer to the level variable"
        return level
            
