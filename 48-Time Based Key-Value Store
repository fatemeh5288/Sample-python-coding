Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.

Implement the TimeMap class:

TimeMap() Initializes the object of the data structure.
void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp.
String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev <= timestamp. If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns "".

we want to run the get function in O(logn) time hence we should use binary search (the time stamps are sorted in ascending order)

class TimeMap:

    def __init__(self):
        self.store={}

    def set(self, key: str, value: str, timestamp: int) -> None:
        if key not in self.store:                   "we define an empty list if the key doesn't exist in the hash map. otherwise we will get an error"
            self.store[key]=[]
        self.store[key].append([value,timestamp])   "we append pair of values to the right of the hashmap "values" including [value,timestamp]"
        

    def get(self, key: str, timestamp: int) -> str:
        res,values="",self.store.get(key,[])        "we initialize res to empty string so if the key doesn't exist it will return nothing. we run get operation on key to get pair of value,timestamp"
        l,r=0,len(values)-1
        while l<=r:
            mid=(l+r)//2
            if values[mid][1]<=timestamp:          "we do equal here as well so if the timestamp is greater than all values in the hashmap, the res will be updated each time to the closest value in the hashmap"
                res=values[mid][0]                 "this is to get the 0th index of 'values' which is bascically the 'value'. at 1st index we will have the timestamp'
                l=mid+1
            else:
                r=mid-1
        return res
