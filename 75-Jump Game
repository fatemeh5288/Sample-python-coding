You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.

we can solve it using greedy approach in O(n) time

class Solution:
    def canJump(self, nums: List[int]) -> bool:
        goal=len(nums)-1                    "if we can reach end it means that we can return True hence we start from end of the nums and make goal closer to first index"
        for i in range(len(nums)-1,-1,-1):  "start from end of nums running backward"
            if i+nums[i]>=goal:             "if this the number of jumps plus the index is greater than goal's index it means that we can reach that particular index i"
                goal=i                      "hence we can update our goal now making it closer to 0"
        return True if goal==0 else False   "if it never reached 0 it means that it got stock somewhere because it couldn't reach the target hence returning False"
