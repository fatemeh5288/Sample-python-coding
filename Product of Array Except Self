Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.


class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        res=[1]*len(nums)                     "creating a result list"
        prefix=1                              "this will include products of all prefix values of res[i] and gets updated"
        for i in range(len(nums)):            "starting from beginning of array"
            res[i]=prefix                     "each time we store prefix in res"
            prefix=prefix*nums[i]             "prefix get updated before we proceed we next i value, this will ensure that the next res[i] being stored has product of all values from previous indices"
        postfix=1
        for i in range(len(nums)-1,-1,-1):    "for postfix start from end of the array"
            res[i]=postfix*res[i]             "update result array-this will multiply all the results from previous for loop to the nex res values from postfix"
            postfix=postfix*nums[i]
        return res
