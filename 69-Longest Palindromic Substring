Given a string s, return the longest palindromic substring in s.

time complexity of this solution O(n**2)

class Solution:
    def longestPalindrome(self, s: str) -> str:
        string=''
        max_len=0
        for i in range(len(s)):                         "this is if the max palindrom is odd so we start both left and right pointers at middle and expand left and right"
            l,r=i,i
            while l>=0 and r<len(s) and s[l]==s[r]:     "while this condition is true we store the string if we find a longer one that we already have stored and expand l and r pointers to check all possible palindroms"
                if (r-l+1)>max_len:
                    max_len=r-l+1
                    string=s[l:r+1]
                l-=1
                r+=1
            
            l,r=i,i+1                                  "this is if our longest palindrom is even number we shift the right pointer because we don't have a middle here"
            while l>=0 and r<len(s) and s[l]==s[r]:
                if (r-l+1)>max_len:
                    max_len=r-l+1
                    string=s[l:r+1]
                l-=1
                r+=1
        return string
