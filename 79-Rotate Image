You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

time complexity O(n^2) because of size of matrix which is n^2 and space O(1) because no extra memory was used

class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        l,r=0,len(matrix)-1                       "we set the l and r pointers so that in each iteration we could rotate the outer square"
        while l<r:
            for i in range(r-l):
                t,b=l,r                           "t and b pointers will be equal to l and r since matrix is square"
                topleft=matrix[t][l+i]            "to reduce the number of variables stored we work in reverse order, only storing topleft and each time replacing it"
                matrix[t][l+i]=matrix[b-i][l]     "this i is used so that we can rotate all the elements in the outer layer"
                matrix[b-i][l]=matrix[b][r-i]
                matrix[b][r-i]=matrix[t+i][r]
                matrix[t+i][r]=topleft
            l+=1                                  "after this is done we update l and r pointers so that we can rotate the inner square"
            r-=1
