Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        l,r=0,len(numbers)-1                "since array is sorted we define two pointers at the beginning and end of the list"
        while l<r:                     
            cur_sum=numbers[l]+numbers[r]   "take sum of the two pointers and compare against the target value"
            if target<cur_sum:              "if target is less it shows that the right pointer should move to the left"
                r-=1
            elif target>cur_sum:            "if target is larger it shows that the left pointer should move to the right"
                l+=1
            else:                           "else we have found the desired l and r but in the question it asks for the indices +1"
                return [l+1,r+1]
