Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.

Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.

Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.

Return the minimum integer k such that she can eat all the bananas within h hours.


This is a binary search so run time is O(n*log(max(n))) where max(n) is the max number of bananas in each pile

class Solution:
    def minEatingSpeed(self, piles: List[int], h: int) -> int:
        l,r=1,max(piles)                 "the right pointer is set to max number of bananas in each pile since this is the max speed we can go"
        res=r
        while l<=r:
            k=(l+r)//2
            hours=0                  
            for p in piles:
                hours+=math.ceil(p/k)   "we calculate the total hours required by dividing numbers in p by k(min speed we have found up to now) and then rounding up"
            if hours<=h:
                res=min(res,k)         "we update is the result to the min k we have found up to now"
                r=k-1
            else:
                l=k+1
            
        return k
